import React, { useEffect, useState } from 'react';
import { useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { 
  Box, 
  Container, 
  Typography, 
  Button, 
  Paper, 
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  CircularProgress,
  Alert
} from '@mui/material';

// API URL from config
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

/**
 * Simplified RatingStatistics Component
 * Completely rewritten to avoid any authentication issues
 */
const RatingStatistics = () => {
  // State for component
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [periods, setPeriods] = useState([]);
  const [selectedPeriod, setSelectedPeriod] = useState('');
  const [statistics, setStatistics] = useState(null);
  
  // Get auth token from Redux
  const userInfo = useSelector((state) => state.auth?.userInfo);
  const token = userInfo?.token || '';
  const navigate = useNavigate();

  // Data fetching function
  const fetchData = async () => {
    console.log('🔄 RatingStatistics: Starting data fetch');
    
    // Clear any existing errors
    setError(null);
    setLoading(true);
    
    if (!token) {
      console.log('❌ No token available');
      setError('Please log in to access this page');
      setLoading(false);
      return;
    }
    
    // Configure axios headers
    const config = {
      headers: {
        'Authorization': `Bearer ${token.trim()}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    };
    
    try {
      // Fetch periods directly - no service layer
      console.log('📡 Fetching rating periods directly');
      const periodsResponse = await axios.get(`${API_URL}/api/ratings/periods`, config);
      
      console.log('✅ Periods response received:', periodsResponse.status);
      
      if (periodsResponse.data && Array.isArray(periodsResponse.data)) {
        console.log(`📊 Got ${periodsResponse.data.length} rating periods`);
        setPeriods(periodsResponse.data);
      } else {
        console.log('⚠️ No periods or invalid data format');
        setPeriods([]);
      }
      
      // Reset loading state
      setLoading(false);
    } catch (err) {
      console.error('❌ Error fetching data:', err);
      
      if (err.response && err.response.status === 401) {
        setError('Authentication required. Please log in again.');
      } else {
        setError('Error loading data. Please try again.');
      }
      
      setLoading(false);
    }
  };
  
  // Handle period selection
  const handlePeriodChange = (event) => {
    setSelectedPeriod(event.target.value);
  };
  
  // Fetch statistics when period is selected
  const fetchStatistics = async () => {
    if (!selectedPeriod) return;
    
    setLoading(true);
    setError(null);
    
    try {
      // Configure axios headers
      const config = {
        headers: {
          'Authorization': `Bearer ${token.trim()}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      };
      
      // Fetch statistics directly
      console.log('📡 Fetching statistics for period:', selectedPeriod);
      const statsResponse = await axios.get(
        `${API_URL}/api/ratings/stats?periodId=${selectedPeriod}`, 
        config
      );
      
      console.log('✅ Statistics response received:', statsResponse.status);
      
      if (statsResponse.data) {
        console.log('📊 Got statistics data');
        setStatistics(statsResponse.data);
      } else {
        console.log('⚠️ No statistics data');
        setStatistics(null);
      }
    } catch (err) {
      console.error('❌ Error fetching statistics:', err);
      
      if (err.response && err.response.status === 401) {
        setError('Authentication required. Please log in again.');
      } else {
        setError('Error loading statistics. Please try again.');
      }
    } finally {
      setLoading(false);
    }
  };
  
  // Initialize data on component mount
  useEffect(() => {
    fetchData();
    
    // Cleanup
    return () => {
      console.log('🧹 Cleaning up component');
    };
  }, []);
  
  // Fetch statistics when period changes
  useEffect(() => {
    if (selectedPeriod) {
      fetchStatistics();
    }
  }, [selectedPeriod]);
  
  // Render the component
  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Typography variant="h4" gutterBottom>
        Rating Statistics
      </Typography>
      
      {/* Error message */}
      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}
      
      {/* Loading indicator */}
      {loading && (
        <Box display="flex" justifyContent="center" my={4}>
          <CircularProgress />
        </Box>
      )}
      
      {/* Main content */}
      {!loading && !error && (
        <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>
          {/* Period selection */}
          <Grid container spacing={3} sx={{ mb: 3 }}>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel id="period-select-label">Rating Period</InputLabel>
                <Select
                  labelId="period-select-label"
                  id="period-select"
                  value={selectedPeriod}
                  onChange={handlePeriodChange}
                  label="Rating Period"
                >
                  {periods.map((period) => (
                    <MenuItem key={period._id} value={period._id}>
                      {period.title}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
          </Grid>
          
          {/* Statistics display */}
          {selectedPeriod && statistics && (
            <Box>
              <Typography variant="h6" gutterBottom>
                Statistics for selected period
              </Typography>
              
              {/* Simple display of statistics data as JSON */}
              <Paper sx={{ p: 2, maxHeight: 400, overflow: 'auto' }}>
                <pre>{JSON.stringify(statistics, null, 2)}</pre>
              </Paper>
            </Box>
          )}
          
          {/* No period selected message */}
          {!selectedPeriod && (
            <Alert severity="info">
              Please select a rating period to view statistics
            </Alert>
          )}
          
          {/* No statistics available message */}
          {selectedPeriod && !statistics && !loading && (
            <Alert severity="warning">
              No statistics available for the selected period
            </Alert>
          )}
        </Paper>
      )}
    </Container>
  );
};

export default RatingStatistics;
